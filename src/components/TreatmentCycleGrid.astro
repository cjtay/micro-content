---
import TreatmentCycleCard from "./TreatmentCycleCard.astro";

interface TreatmentScheduleDay {
  day: number;
  treatments: string[];
}

interface Props {
  treatmentSchedule: TreatmentScheduleDay[];
  treatments: any[];
}

const { treatmentSchedule = [], treatments = [] } = Astro.props;

// Create a map of treatment name to icon for lookup
const treatmentIconMap = new Map();

// Handle both string array and object array formats for treatments
if (treatments.length > 0) {
  if (typeof treatments[0] === 'object' && treatments[0].name) {
    // Object format: [{name, cycle, info, icon}]
    treatments.forEach(treatment => {
      treatmentIconMap.set(treatment.name.toLowerCase(), treatment.icon);
    });
  }
}

// Function to get icon for a treatment name
function getIconForTreatment(treatmentName: string): string {
  const icon = treatmentIconMap.get(treatmentName.toLowerCase());
  if (icon) return icon;
  
  // Fallback mapping for common treatment names
  const fallbackMap: Record<string, string> = {
    'capecitabine': 'pill-blue',
    'lapatinib': 'pill-red', 
    'cisplatin': 'drip-red',
    'fluorouracil': 'drip-blue',
    'trastuzumab': 'inject-green',
    'pertuzumab': 'inject',
    'paclitaxel': 'drip-green',
    'radiation': 'radiation-green',
    'rest': 'home'
  };
  
  return fallbackMap[treatmentName.toLowerCase()] || 'pill-blue';
}
---

<div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-4 xl:grid-cols-4 gap-2 my-8">
  {treatmentSchedule.map((scheduleDay) => {
    const icons = scheduleDay.treatments.map(treatment => getIconForTreatment(treatment));
    return (
      <TreatmentCycleCard 
        day={scheduleDay.day.toString()} 
        icons={icons} 
      />
    );
  })}
</div>