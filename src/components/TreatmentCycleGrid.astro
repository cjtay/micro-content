---
import TreatmentCycleCard from "./TreatmentCycleCard.astro";
import treatmentsData from "../data/treatments.json";

interface TreatmentScheduleDay {
  day: number;
  treatments: string[];
}

interface Props {
  treatmentSchedule: TreatmentScheduleDay[];
}

const { treatmentSchedule = [] } = Astro.props;

// Create a map from the centralized treatments.json file with normalized keys
const treatmentIconMap = new Map();
treatmentsData.forEach(treatment => {
  // Normalize: lowercase, trim, normalize whitespace
  const normalizedKey = treatment.name.toLowerCase().trim().replace(/\s+/g, ' ');
  treatmentIconMap.set(normalizedKey, treatment.icon);
});

// Function to get icon for a treatment name with robust matching
function getIconForTreatment(treatmentName: string): string {
  // Normalize input: lowercase, trim, normalize whitespace
  const normalizedInput = treatmentName.toLowerCase().trim().replace(/\s+/g, ' ');
  const icon = treatmentIconMap.get(normalizedInput);
  
  if (!icon) {
    console.warn(`⚠️ No icon found for treatment: "${treatmentName}" (normalized: "${normalizedInput}")`);
    console.log('Available keys:', Array.from(treatmentIconMap.keys()));
  }
  
  return icon || 'pill-blue'; // Default fallback
}
---

<div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-4 xl:grid-cols-4 gap-2 my-8">
  {treatmentSchedule.map((scheduleDay) => {
    const icons = scheduleDay.treatments.map(treatment => getIconForTreatment(treatment));
    return (
      <TreatmentCycleCard 
        day={scheduleDay.day.toString()} 
        icons={icons} 
      />
    );
  })}
</div>